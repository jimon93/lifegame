// Generated by CoffeeScript 1.6.3
(function() {
  var Builder, CanvasBuilder, CanvasVisitor, Cell, CellField, ConsoleBuilder, ConsoleVisitor, Director, LifeGame, Timer, builder, director, extend, game, _ref, _ref1,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  extend = function() {
    var args, key, o, obj, val, _i, _len;
    obj = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      o = args[_i];
      if (o != null) {
        for (key in o) {
          val = o[key];
          obj[key] = val;
        }
      }
    }
    return obj;
  };

  LifeGame = (function() {
    function LifeGame(field, visitor) {
      this.field = field;
      this.visitor = visitor;
      this.render = __bind(this.render, this);
      this.update = __bind(this.update, this);
      this.generation = 0;
      this.render();
    }

    LifeGame.prototype.update = function(fps) {
      this.generation++;
      this.field.update();
      return this;
    };

    LifeGame.prototype.render = function(fps) {
      var _base;
      if (typeof console !== "undefined" && console !== null) {
        console.log(fps);
      }
      if (this.visitor != null) {
        this.visitor.reset();
        this.field.render(this.visitor);
        return typeof (_base = this.visitor).view === "function" ? _base.view() : void 0;
      }
    };

    return LifeGame;

  })();

  CellField = (function() {
    function CellField(height, width) {
      var _this = this;
      this.height = height;
      this.width = width;
      this.makeCountsMatrix = __bind(this.makeCountsMatrix, this);
      this.makeMatrix = __bind(this.makeMatrix, this);
      this.each = __bind(this.each, this);
      this.render = __bind(this.render, this);
      this.update = __bind(this.update, this);
      this.cells = this.makeMatrix(function(x, y) {
        return (new Cell(x, y)).setRandomLive();
      });
    }

    CellField.prototype.update = function() {
      var counts,
        _this = this;
      counts = this.makeCountsMatrix();
      return this.each(function(cell) {
        var x, y;
        x = cell.x, y = cell.y;
        return cell.update(counts[y][x]);
      });
    };

    CellField.prototype.render = function(visitor) {
      var _this = this;
      return this.each(function(cell) {
        return cell.render(visitor);
      });
    };

    CellField.prototype.each = function(func) {
      var cell, line, _i, _len, _ref, _results;
      _ref = this.cells;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = line.length; _j < _len1; _j++) {
            cell = line[_j];
            _results1.push(func(cell));
          }
          return _results1;
        })());
      }
      return _results;
    };

    CellField.prototype.makeMatrix = function(init) {
      var x, y, _i, _ref, _results;
      _results = [];
      for (y = _i = 0, _ref = this.height; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = this.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(init(x, y));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    CellField.prototype.makeCountsMatrix = function() {
      var counts,
        _this = this;
      counts = this.makeMatrix(function() {
        return 0;
      });
      this.each(function(cell) {
        var dx, dy, x, y, _i, _results;
        x = cell.x, y = cell.y;
        if (cell.live) {
          _results = [];
          for (dy = _i = -1; _i <= 1; dy = ++_i) {
            _results.push((function() {
              var _j, _ref, _results1;
              _results1 = [];
              for (dx = _j = -1; _j <= 1; dx = ++_j) {
                if (dy !== 0 || dx !== 0) {
                  if (((_ref = counts[y + dy]) != null ? _ref[x + dx] : void 0) != null) {
                    _results1.push(counts[y + dy][x + dx]++);
                  } else {
                    _results1.push(void 0);
                  }
                }
              }
              return _results1;
            })());
          }
          return _results;
        }
      });
      return counts;
    };

    return CellField;

  })();

  Cell = (function() {
    function Cell(x, y) {
      this.x = x;
      this.y = y;
      this.setRandomLive = __bind(this.setRandomLive, this);
      this.render = __bind(this.render, this);
      this.update = __bind(this.update, this);
      this.live = false;
    }

    Cell.prototype.update = function(neigbor) {
      return this.live = (function() {
        switch (neigbor) {
          case 2:
            return this.live;
          case 3:
            return true;
          default:
            return false;
        }
      }).call(this);
    };

    Cell.prototype.render = function(visitor) {
      return visitor.visit(this);
    };

    Cell.prototype.setRandomLive = function() {
      this.live = Math.random() * 3 < 1;
      return this;
    };

    return Cell;

  })();

  ConsoleVisitor = (function() {
    function ConsoleVisitor() {
      this.view = __bind(this.view, this);
      this.visit = __bind(this.visit, this);
      this.reset = __bind(this.reset, this);
    }

    ConsoleVisitor.prototype.reset = function() {
      return this.res = [];
    };

    ConsoleVisitor.prototype.visit = function(cell) {
      var _base, _name;
      if ((_base = this.res)[_name = cell.y] == null) {
        _base[_name] = [];
      }
      return this.res[cell.y][cell.x] = cell.live ? '*' : ' ';
    };

    ConsoleVisitor.prototype.view = function() {
      return console.log(this.res);
    };

    return ConsoleVisitor;

  })();

  CanvasVisitor = (function() {
    function CanvasVisitor(canvas, height, width, cellSize) {
      this.height = height;
      this.width = width;
      this.cellSize = cellSize;
      this.setupContext = __bind(this.setupContext, this);
      this.setupCanvas = __bind(this.setupCanvas, this);
      this.visit = __bind(this.visit, this);
      this.reset = __bind(this.reset, this);
      this.canvas = this.setupCanvas(canvas);
      this.context = this.setupContext(this.canvas);
    }

    CanvasVisitor.prototype.reset = function() {
      return this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };

    CanvasVisitor.prototype.visit = function(cell) {
      if (cell.live) {
        return this.context.fillRect(cell.x * this.cellSize, cell.y * this.cellSize, this.cellSize, this.cellSize);
      }
    };

    CanvasVisitor.prototype.setupCanvas = function(canvas) {
      canvas.width = canvas.style.width = this.width * this.cellSize;
      canvas.height = canvas.style.height = this.height * this.cellSize;
      return canvas;
    };

    CanvasVisitor.prototype.setupContext = function(canvas) {
      var context;
      context = canvas.getContext('2d');
      context.fillStyle = "rgb(0,0,0)";
      return context;
    };

    return CanvasVisitor;

  })();

  Builder = (function() {
    Builder.prototype.defaults = {
      height: 10,
      width: 10,
      fps: 10
    };

    function Builder(options) {
      this.createTimer = __bind(this.createTimer, this);
      this.createGame = __bind(this.createGame, this);
      this.createField = __bind(this.createField, this);
      this.options = extend({}, this.defaults, options);
    }

    Builder.prototype.createField = function() {
      return new CellField(this.options.height, this.options.width);
    };

    Builder.prototype.createGame = function(field, visitor) {
      return new LifeGame(field, visitor);
    };

    Builder.prototype.createTimer = function(game) {
      var func,
        _this = this;
      func = function(fps) {
        return game.update(fps).render(fps);
      };
      return new Timer(func, this.options.fps);
    };

    return Builder;

  })();

  ConsoleBuilder = (function(_super) {
    __extends(ConsoleBuilder, _super);

    function ConsoleBuilder() {
      this.createVisitor = __bind(this.createVisitor, this);
      _ref = ConsoleBuilder.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ConsoleBuilder.prototype.createVisitor = function() {
      return new ConsoleVisitor;
    };

    return ConsoleBuilder;

  })(Builder);

  CanvasBuilder = (function(_super) {
    __extends(CanvasBuilder, _super);

    CanvasBuilder.prototype.defaults = {
      cellSize: 10
    };

    function CanvasBuilder(canvas, options) {
      this.canvas = canvas;
      this.createVisitor = __bind(this.createVisitor, this);
      CanvasBuilder.__super__.constructor.call(this, extend({}, this.defaults, options));
    }

    CanvasBuilder.prototype.createVisitor = function() {
      return new CanvasVisitor(this.canvas, this.options.height, this.options.width, this.options.cellSize);
    };

    return CanvasBuilder;

  })(Builder);

  Director = (function() {
    function Director(builder) {
      this.builder = builder;
      this.construct = __bind(this.construct, this);
    }

    Director.prototype.construct = function() {
      var field, game, timer, visitor;
      field = this.builder.createField();
      visitor = this.builder.createVisitor();
      game = this.builder.createGame(field, visitor);
      return timer = this.builder.createTimer(game);
    };

    return Director;

  })();

  /*
  class Position
    constructor: (@x, @y)->
  
    add: (other)=>
      new Position(@x + other.x, @y + other.y)
  
    toString: =>
      "(#{@x}, #{@y})"
  
  class Rectangle
    constructor: (@height, @width)->
      @list = []
      for y in [0...@height]
        for x in [0...@width]
          @list.push new Position(x, y)
  */


  Timer = (function() {
    function Timer(func, targetFPS) {
      this.func = func;
      this.targetFPS = targetFPS;
      this.getFPS = __bind(this.getFPS, this);
      this.stop = __bind(this.stop, this);
      this.start = __bind(this.start, this);
      this.next = __bind(this.next, this);
    }

    Timer.prototype.next = function() {
      return this.func(this.getFPS());
    };

    Timer.prototype.start = function() {
      return this.id = setInterval(this.next, 1000.0 / this.targetFPS);
    };

    Timer.prototype.stop = function() {
      return clearInterval(this.id);
    };

    Timer.prototype.getFPS = function() {
      var fps, nowTime;
      nowTime = (new Date).getTime();
      fps = 1000.0 / (nowTime - this.prevTime);
      this.prevTime = nowTime;
      return fps;
    };

    return Timer;

  })();

  if (typeof $ !== "undefined" && $ !== null) {
    $.fn.LifeGame = function(options) {
      var builder, director, game;
      if (options == null) {
        options = {};
      }
      builder = new CanvasBuilder(this[0], options);
      director = new Director(builder);
      game = director.construct();
      return game.start();
    };
  }

  if ((typeof __filename !== "undefined" && __filename !== null) && __filename === (typeof process !== "undefined" && process !== null ? (_ref1 = process.mainModule) != null ? _ref1.filename : void 0 : void 0)) {
    builder = new ConsoleBuilder({
      height: 5,
      fps: 1
    });
    director = new Director(builder);
    game = director.construct();
    game.start();
  }

}).call(this);
