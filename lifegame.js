// Generated by CoffeeScript 1.6.3
(function() {
  var Cell, Cell4Canvas, Cell4Console, CellField, CellField4Canvas, CellField4Console, LifeGame, LifeGame4Canvas, LifeGame4Console, Position, extend, game, log, _ref, _ref1, _ref2, _ref3, _ref4,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  log = console.log;

  extend = function() {
    var args, key, o, obj, val, _i, _len;
    obj = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      o = args[_i];
      for (key in o) {
        val = o[key];
        obj[key] = val;
      }
    }
    return obj;
  };

  LifeGame = (function() {
    LifeGame.prototype.defaults = {
      height: 10,
      width: 10,
      fps: 10
    };

    function LifeGame(options) {
      this.start = __bind(this.start, this);
      this.update = __bind(this.update, this);
      this.createCellField = __bind(this.createCellField, this);
      this.options = extend({}, this.defaults, options);
      this.field = this.createCellField();
    }

    LifeGame.prototype.createCellField = function() {
      return new CellField(this.options.height, this.options.width, this.options);
    };

    LifeGame.prototype.update = function() {
      this.field.update();
      return this;
    };

    LifeGame.prototype.start = function() {
      var _this = this;
      if (typeof this.render === "function") {
        this.render();
      }
      return setInterval((function() {
        _this.update();
        return typeof _this.render === "function" ? _this.render() : void 0;
      }), 1000 / this.options.fps);
    };

    return LifeGame;

  })();

  CellField = (function() {
    function CellField(height, width, options) {
      this.height = height;
      this.width = width;
      this.options = options;
      this.createCell = __bind(this.createCell, this);
      this.randomCellLive = __bind(this.randomCellLive, this);
      this.initCell = __bind(this.initCell, this);
      this.neigborEach = __bind(this.neigborEach, this);
      this.rectangleEach = __bind(this.rectangleEach, this);
      this.onCellChange = __bind(this.onCellChange, this);
      this.update = __bind(this.update, this);
      this.cells = {};
      this.rectangleEach(this.initCell);
      this.rectangleEach(this.randomCellLive);
    }

    CellField.prototype.update = function() {
      var cell, pos, _ref, _results;
      _ref = this.cells;
      _results = [];
      for (pos in _ref) {
        cell = _ref[pos];
        _results.push(cell.update());
      }
      return _results;
    };

    CellField.prototype.onCellChange = function(cell) {
      var diff,
        _this = this;
      diff = cell.live ? 1 : -1;
      return this.neigborEach(cell.pos, function(pos) {
        var _ref;
        return (_ref = _this.cells[pos]) != null ? _ref.neigbor += diff : void 0;
      });
    };

    CellField.prototype.rectangleEach = function(func) {
      var x, y, _i, _ref, _results;
      _results = [];
      for (y = _i = 0, _ref = this.height; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = this.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(func(new Position(x, y)));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    CellField.prototype.neigborEach = function(pos, func) {
      var dx, dy, _i, _results;
      _results = [];
      for (dy = _i = -1; _i <= 1; dy = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (dx = _j = -1; _j <= 1; dx = ++_j) {
            if (!(dy === 1 && dx === 1)) {
              _results1.push(func(new Position(pos.x + dx, pos.y + dy)));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };

    CellField.prototype.initCell = function(pos) {
      this.cells[pos] = this.createCell(pos);
      return this.cells[pos].changeEvents.push(this.onCellChange);
    };

    CellField.prototype.randomCellLive = function(pos) {
      return this.cells[pos].setLive(Math.random() * 3 < 1);
    };

    CellField.prototype.createCell = function(pos) {
      return new Cell(pos, this.options);
    };

    return CellField;

  })();

  Cell = (function() {
    function Cell(pos, options) {
      this.pos = pos;
      this.options = options;
      this.setLive = __bind(this.setLive, this);
      this.update = __bind(this.update, this);
      this.live = false;
      this.neigbor = 0;
      this.changeEvents = [];
    }

    Cell.prototype.update = function() {
      return this.setLive((function() {
        switch (this.neigbor) {
          case 2:
            return this.live;
          case 3:
            return true;
          default:
            return false;
        }
      }).call(this));
    };

    Cell.prototype.setLive = function(next) {
      var event, _i, _len, _ref, _results;
      if (next !== this.live) {
        this.live = next;
        _ref = this.changeEvents;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          event = _ref[_i];
          _results.push(event(this));
        }
        return _results;
      }
    };

    return Cell;

  })();

  LifeGame4Console = (function(_super) {
    __extends(LifeGame4Console, _super);

    function LifeGame4Console() {
      this.render = __bind(this.render, this);
      this.createCellField = __bind(this.createCellField, this);
      _ref = LifeGame4Console.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LifeGame4Console.prototype.createCellField = function() {
      return new CellField4Console(this.options.height, this.options.width, this.options);
    };

    LifeGame4Console.prototype.render = function() {
      return log(this.field.render());
    };

    return LifeGame4Console;

  })(LifeGame);

  CellField4Console = (function(_super) {
    __extends(CellField4Console, _super);

    function CellField4Console() {
      this.render = __bind(this.render, this);
      this.createCell = __bind(this.createCell, this);
      _ref1 = CellField4Console.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    CellField4Console.prototype.createCell = function(pos) {
      return new Cell4Console(pos, this.options);
    };

    CellField4Console.prototype.render = function() {
      var _this = this;
      return this.rectangleEach(function(pos) {
        return _this.cells[pos].render();
      });
    };

    return CellField4Console;

  })(CellField);

  Cell4Console = (function(_super) {
    __extends(Cell4Console, _super);

    function Cell4Console() {
      this.render = __bind(this.render, this);
      _ref2 = Cell4Console.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Cell4Console.prototype.render = function() {
      if (this.live) {
        return '*';
      } else {
        return ' ';
      }
    };

    return Cell4Console;

  })(Cell);

  LifeGame4Canvas = (function(_super) {
    __extends(LifeGame4Canvas, _super);

    LifeGame4Canvas.prototype.defaults = {
      height: 10,
      width: 10,
      fps: 50,
      cellSize: 10
    };

    function LifeGame4Canvas(options) {
      this.render = __bind(this.render, this);
      this.setupContext = __bind(this.setupContext, this);
      this.setupCanvas = __bind(this.setupCanvas, this);
      this.createCellField = __bind(this.createCellField, this);
      LifeGame4Canvas.__super__.constructor.apply(this, arguments);
      this.canvas = this.setupCanvas(this.options.canvas);
      this.context = this.setupContext(this.canvas);
    }

    LifeGame4Canvas.prototype.createCellField = function() {
      return new CellField4Canvas(this.options.height, this.options.width, this.options);
    };

    LifeGame4Canvas.prototype.setupCanvas = function(canvas) {
      canvas.width = canvas.style.width = this.options.width * this.options.cellSize;
      canvas.height = canvas.style.height = this.options.height * this.options.cellSize;
      return canvas;
    };

    LifeGame4Canvas.prototype.setupContext = function(canvas) {
      var context;
      context = canvas.getContext('2d');
      context.fillStyle = "rgb(0,0,0)";
      return context;
    };

    LifeGame4Canvas.prototype.render = function() {
      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
      return this.field.render(this.context);
    };

    return LifeGame4Canvas;

  })(LifeGame);

  CellField4Canvas = (function(_super) {
    __extends(CellField4Canvas, _super);

    function CellField4Canvas() {
      this.render = __bind(this.render, this);
      this.createCell = __bind(this.createCell, this);
      _ref3 = CellField4Canvas.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    CellField4Canvas.prototype.createCell = function(pos) {
      return new Cell4Canvas(pos, this.options);
    };

    CellField4Canvas.prototype.render = function(context) {
      var _this = this;
      return this.rectangleEach(function(pos) {
        return _this.cells[pos].render(context);
      });
    };

    return CellField4Canvas;

  })(CellField);

  Cell4Canvas = (function(_super) {
    __extends(Cell4Canvas, _super);

    function Cell4Canvas() {
      this.render = __bind(this.render, this);
      _ref4 = Cell4Canvas.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Cell4Canvas.prototype.render = function(context) {
      if (this.live) {
        return context.fillRect(this.pos.x * this.options.cellSize, this.pos.y * this.options.cellSize, this.options.cellSize - 1, this.options.cellSize - 1);
      }
    };

    return Cell4Canvas;

  })(Cell);

  Position = (function() {
    function Position(x, y) {
      this.x = x;
      this.y = y;
      this.toString = __bind(this.toString, this);
    }

    Position.prototype.toString = function() {
      return "(" + this.x + ", " + this.y + ")";
    };

    return Position;

  })();

  if (typeof $ !== "undefined" && $ !== null) {
    $.fn.LifeGame = function(options) {
      var game;
      if (options == null) {
        options = {};
      }
      options.canvas = this[0];
      game = new LifeGame4Canvas(options);
      return game.start();
    };
  } else {
    game = new LifeGame4Console({
      height: 5,
      width: 10
    });
    game.start();
  }

}).call(this);
